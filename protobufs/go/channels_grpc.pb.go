// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelsClient is the client API for Channels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelsClient interface {
	JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	CreateChannelInvite(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*ChannelInvite, error)
	DeleteChannelInvite(ctx context.Context, in *ChannelInvite, opts ...grpc.CallOption) (*Success, error)
	GetChannel(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*Channel, error)
	GetChannelAuditLog(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*ChannelAuditLog, error)
	GetChannelRoles(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*Roles, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetRoles(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*Roles, error)
	UpdateChannelInfo(ctx context.Context, in *UpdateChannelInfoRequest, opts ...grpc.CallOption) (*ChannelInfo, error)
	KickUser(ctx context.Context, in *KickUserRequest, opts ...grpc.CallOption) (*Success, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*Success, error)
	UpdateUserPrivs(ctx context.Context, in *UpdateUserPrivsRequest, opts ...grpc.CallOption) (*UserPrivs, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*UserList, error)
}

type channelsClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelsClient(cc grpc.ClientConnInterface) ChannelsClient {
	return &channelsClient{cc}
}

func (c *channelsClient) JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, "/Channels/JoinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, "/Channels/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) CreateChannelInvite(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*ChannelInvite, error) {
	out := new(ChannelInvite)
	err := c.cc.Invoke(ctx, "/Channels/CreateChannelInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) DeleteChannelInvite(ctx context.Context, in *ChannelInvite, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Channels/DeleteChannelInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) GetChannel(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, "/Channels/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) GetChannelAuditLog(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*ChannelAuditLog, error) {
	out := new(ChannelAuditLog)
	err := c.cc.Invoke(ctx, "/Channels/GetChannelAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) GetChannelRoles(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := c.cc.Invoke(ctx, "/Channels/GetChannelRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/Channels/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) GetRoles(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := c.cc.Invoke(ctx, "/Channels/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) UpdateChannelInfo(ctx context.Context, in *UpdateChannelInfoRequest, opts ...grpc.CallOption) (*ChannelInfo, error) {
	out := new(ChannelInfo)
	err := c.cc.Invoke(ctx, "/Channels/UpdateChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) KickUser(ctx context.Context, in *KickUserRequest, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Channels/KickUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Channels/BanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) UpdateUserPrivs(ctx context.Context, in *UpdateUserPrivsRequest, opts ...grpc.CallOption) (*UserPrivs, error) {
	out := new(UserPrivs)
	err := c.cc.Invoke(ctx, "/Channels/UpdateUserPrivs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/Channels/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelsServer is the server API for Channels service.
// All implementations must embed UnimplementedChannelsServer
// for forward compatibility
type ChannelsServer interface {
	JoinChannel(context.Context, *JoinChannelRequest) (*Channel, error)
	CreateChannel(context.Context, *CreateChannelRequest) (*Channel, error)
	CreateChannelInvite(context.Context, *GetChannelInfoRequest) (*ChannelInvite, error)
	DeleteChannelInvite(context.Context, *ChannelInvite) (*Success, error)
	GetChannel(context.Context, *GetChannelInfoRequest) (*Channel, error)
	GetChannelAuditLog(context.Context, *GetChannelInfoRequest) (*ChannelAuditLog, error)
	GetChannelRoles(context.Context, *GetChannelInfoRequest) (*Roles, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*UserInfo, error)
	GetRoles(context.Context, *GetChannelInfoRequest) (*Roles, error)
	UpdateChannelInfo(context.Context, *UpdateChannelInfoRequest) (*ChannelInfo, error)
	KickUser(context.Context, *KickUserRequest) (*Success, error)
	BanUser(context.Context, *BanUserRequest) (*Success, error)
	UpdateUserPrivs(context.Context, *UpdateUserPrivsRequest) (*UserPrivs, error)
	GetUsers(context.Context, *GetUsersRequest) (*UserList, error)
	mustEmbedUnimplementedChannelsServer()
}

// UnimplementedChannelsServer must be embedded to have forward compatible implementations.
type UnimplementedChannelsServer struct {
}

func (UnimplementedChannelsServer) JoinChannel(context.Context, *JoinChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedChannelsServer) CreateChannel(context.Context, *CreateChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedChannelsServer) CreateChannelInvite(context.Context, *GetChannelInfoRequest) (*ChannelInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannelInvite not implemented")
}
func (UnimplementedChannelsServer) DeleteChannelInvite(context.Context, *ChannelInvite) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelInvite not implemented")
}
func (UnimplementedChannelsServer) GetChannel(context.Context, *GetChannelInfoRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedChannelsServer) GetChannelAuditLog(context.Context, *GetChannelInfoRequest) (*ChannelAuditLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelAuditLog not implemented")
}
func (UnimplementedChannelsServer) GetChannelRoles(context.Context, *GetChannelInfoRequest) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelRoles not implemented")
}
func (UnimplementedChannelsServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedChannelsServer) GetRoles(context.Context, *GetChannelInfoRequest) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedChannelsServer) UpdateChannelInfo(context.Context, *UpdateChannelInfoRequest) (*ChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelInfo not implemented")
}
func (UnimplementedChannelsServer) KickUser(context.Context, *KickUserRequest) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUser not implemented")
}
func (UnimplementedChannelsServer) BanUser(context.Context, *BanUserRequest) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedChannelsServer) UpdateUserPrivs(context.Context, *UpdateUserPrivsRequest) (*UserPrivs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPrivs not implemented")
}
func (UnimplementedChannelsServer) GetUsers(context.Context, *GetUsersRequest) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedChannelsServer) mustEmbedUnimplementedChannelsServer() {}

// UnsafeChannelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelsServer will
// result in compilation errors.
type UnsafeChannelsServer interface {
	mustEmbedUnimplementedChannelsServer()
}

func RegisterChannelsServer(s grpc.ServiceRegistrar, srv ChannelsServer) {
	s.RegisterService(&Channels_ServiceDesc, srv)
}

func _Channels_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).JoinChannel(ctx, req.(*JoinChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_CreateChannelInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).CreateChannelInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/CreateChannelInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).CreateChannelInvite(ctx, req.(*GetChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_DeleteChannelInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).DeleteChannelInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/DeleteChannelInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).DeleteChannelInvite(ctx, req.(*ChannelInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).GetChannel(ctx, req.(*GetChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_GetChannelAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).GetChannelAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/GetChannelAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).GetChannelAuditLog(ctx, req.(*GetChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_GetChannelRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).GetChannelRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/GetChannelRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).GetChannelRoles(ctx, req.(*GetChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).GetRoles(ctx, req.(*GetChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_UpdateChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).UpdateChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/UpdateChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).UpdateChannelInfo(ctx, req.(*UpdateChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/KickUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).KickUser(ctx, req.(*KickUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/BanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_UpdateUserPrivs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPrivsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).UpdateUserPrivs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/UpdateUserPrivs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).UpdateUserPrivs(ctx, req.(*UpdateUserPrivsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channels/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Channels_ServiceDesc is the grpc.ServiceDesc for Channels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Channels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Channels",
	HandlerType: (*ChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinChannel",
			Handler:    _Channels_JoinChannel_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _Channels_CreateChannel_Handler,
		},
		{
			MethodName: "CreateChannelInvite",
			Handler:    _Channels_CreateChannelInvite_Handler,
		},
		{
			MethodName: "DeleteChannelInvite",
			Handler:    _Channels_DeleteChannelInvite_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _Channels_GetChannel_Handler,
		},
		{
			MethodName: "GetChannelAuditLog",
			Handler:    _Channels_GetChannelAuditLog_Handler,
		},
		{
			MethodName: "GetChannelRoles",
			Handler:    _Channels_GetChannelRoles_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Channels_GetUserInfo_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _Channels_GetRoles_Handler,
		},
		{
			MethodName: "UpdateChannelInfo",
			Handler:    _Channels_UpdateChannelInfo_Handler,
		},
		{
			MethodName: "KickUser",
			Handler:    _Channels_KickUser_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _Channels_BanUser_Handler,
		},
		{
			MethodName: "UpdateUserPrivs",
			Handler:    _Channels_UpdateUserPrivs_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Channels_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channels.proto",
}

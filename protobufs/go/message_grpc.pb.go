// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MessagesClient is the client API for Messages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagesClient interface {
	HandleMessages(ctx context.Context, opts ...grpc.CallOption) (Messages_HandleMessagesClient, error)
	GetMessageHistory(ctx context.Context, in *RequestMessageHistory, opts ...grpc.CallOption) (*MessageHistory, error)
}

type messagesClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagesClient(cc grpc.ClientConnInterface) MessagesClient {
	return &messagesClient{cc}
}

func (c *messagesClient) HandleMessages(ctx context.Context, opts ...grpc.CallOption) (Messages_HandleMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messages_serviceDesc.Streams[0], "/Messages/HandleMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesHandleMessagesClient{stream}
	return x, nil
}

type Messages_HandleMessagesClient interface {
	Send(*CreateMessage) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messagesHandleMessagesClient struct {
	grpc.ClientStream
}

func (x *messagesHandleMessagesClient) Send(m *CreateMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagesHandleMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesClient) GetMessageHistory(ctx context.Context, in *RequestMessageHistory, opts ...grpc.CallOption) (*MessageHistory, error) {
	out := new(MessageHistory)
	err := c.cc.Invoke(ctx, "/Messages/GetMessageHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagesServer is the server API for Messages service.
// All implementations must embed UnimplementedMessagesServer
// for forward compatibility
type MessagesServer interface {
	HandleMessages(Messages_HandleMessagesServer) error
	GetMessageHistory(context.Context, *RequestMessageHistory) (*MessageHistory, error)
	mustEmbedUnimplementedMessagesServer()
}

// UnimplementedMessagesServer must be embedded to have forward compatible implementations.
type UnimplementedMessagesServer struct {
}

func (UnimplementedMessagesServer) HandleMessages(Messages_HandleMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleMessages not implemented")
}
func (UnimplementedMessagesServer) GetMessageHistory(context.Context, *RequestMessageHistory) (*MessageHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageHistory not implemented")
}
func (UnimplementedMessagesServer) mustEmbedUnimplementedMessagesServer() {}

// UnsafeMessagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagesServer will
// result in compilation errors.
type UnsafeMessagesServer interface {
	mustEmbedUnimplementedMessagesServer()
}

func RegisterMessagesServer(s grpc.ServiceRegistrar, srv MessagesServer) {
	s.RegisterService(&_Messages_serviceDesc, srv)
}

func _Messages_HandleMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagesServer).HandleMessages(&messagesHandleMessagesServer{stream})
}

type Messages_HandleMessagesServer interface {
	Send(*Message) error
	Recv() (*CreateMessage, error)
	grpc.ServerStream
}

type messagesHandleMessagesServer struct {
	grpc.ServerStream
}

func (x *messagesHandleMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagesHandleMessagesServer) Recv() (*CreateMessage, error) {
	m := new(CreateMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messages_GetMessageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServer).GetMessageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Messages/GetMessageHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServer).GetMessageHistory(ctx, req.(*RequestMessageHistory))
	}
	return interceptor(ctx, in, info, handler)
}

var _Messages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Messages",
	HandlerType: (*MessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessageHistory",
			Handler:    _Messages_GetMessageHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleMessages",
			Handler:       _Messages_HandleMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

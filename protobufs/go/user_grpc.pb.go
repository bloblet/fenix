// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	RequestToken(ctx context.Context, in *AuthMethod, opts ...grpc.CallOption) (*AuthMethod, error)
	GetUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *RequestUserCreation, opts ...grpc.CallOption) (*UserCreated, error)
	WaitForEmailVerification(ctx context.Context, in *AuthMethod, opts ...grpc.CallOption) (Users_WaitForEmailVerificationClient, error)
	ResendEmailVerification(ctx context.Context, in *AuthMethod, opts ...grpc.CallOption) (*Success, error)
	ChangeMFA(ctx context.Context, in *MFAStatus, opts ...grpc.CallOption) (*Success, error)
	GetMFALink(ctx context.Context, in *RequestMFALink, opts ...grpc.CallOption) (*MFALink, error)
	ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*User, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*UserCreated, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) RequestToken(ctx context.Context, in *AuthMethod, opts ...grpc.CallOption) (*AuthMethod, error) {
	out := new(AuthMethod)
	err := c.cc.Invoke(ctx, "/Users/RequestToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Users/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateUser(ctx context.Context, in *RequestUserCreation, opts ...grpc.CallOption) (*UserCreated, error) {
	out := new(UserCreated)
	err := c.cc.Invoke(ctx, "/Users/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) WaitForEmailVerification(ctx context.Context, in *AuthMethod, opts ...grpc.CallOption) (Users_WaitForEmailVerificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Users_ServiceDesc.Streams[0], "/Users/WaitForEmailVerification", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersWaitForEmailVerificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_WaitForEmailVerificationClient interface {
	Recv() (*Success, error)
	grpc.ClientStream
}

type usersWaitForEmailVerificationClient struct {
	grpc.ClientStream
}

func (x *usersWaitForEmailVerificationClient) Recv() (*Success, error) {
	m := new(Success)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) ResendEmailVerification(ctx context.Context, in *AuthMethod, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Users/ResendEmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ChangeMFA(ctx context.Context, in *MFAStatus, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Users/ChangeMFA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetMFALink(ctx context.Context, in *RequestMFALink, opts ...grpc.CallOption) (*MFALink, error) {
	out := new(MFALink)
	err := c.cc.Invoke(ctx, "/Users/GetMFALink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Users/ChangeUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*UserCreated, error) {
	out := new(UserCreated)
	err := c.cc.Invoke(ctx, "/Users/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	RequestToken(context.Context, *AuthMethod) (*AuthMethod, error)
	GetUser(context.Context, *RequestUser) (*User, error)
	CreateUser(context.Context, *RequestUserCreation) (*UserCreated, error)
	WaitForEmailVerification(*AuthMethod, Users_WaitForEmailVerificationServer) error
	ResendEmailVerification(context.Context, *AuthMethod) (*Success, error)
	ChangeMFA(context.Context, *MFAStatus) (*Success, error)
	GetMFALink(context.Context, *RequestMFALink) (*MFALink, error)
	ChangeUsername(context.Context, *ChangeUsernameRequest) (*User, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*UserCreated, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) RequestToken(context.Context, *AuthMethod) (*AuthMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToken not implemented")
}
func (UnimplementedUsersServer) GetUser(context.Context, *RequestUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServer) CreateUser(context.Context, *RequestUserCreation) (*UserCreated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServer) WaitForEmailVerification(*AuthMethod, Users_WaitForEmailVerificationServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForEmailVerification not implemented")
}
func (UnimplementedUsersServer) ResendEmailVerification(context.Context, *AuthMethod) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmailVerification not implemented")
}
func (UnimplementedUsersServer) ChangeMFA(context.Context, *MFAStatus) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMFA not implemented")
}
func (UnimplementedUsersServer) GetMFALink(context.Context, *RequestMFALink) (*MFALink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMFALink not implemented")
}
func (UnimplementedUsersServer) ChangeUsername(context.Context, *ChangeUsernameRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUsername not implemented")
}
func (UnimplementedUsersServer) ChangePassword(context.Context, *ChangePasswordRequest) (*UserCreated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_RequestToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).RequestToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/RequestToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).RequestToken(ctx, req.(*AuthMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*RequestUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserCreation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*RequestUserCreation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_WaitForEmailVerification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuthMethod)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).WaitForEmailVerification(m, &usersWaitForEmailVerificationServer{stream})
}

type Users_WaitForEmailVerificationServer interface {
	Send(*Success) error
	grpc.ServerStream
}

type usersWaitForEmailVerificationServer struct {
	grpc.ServerStream
}

func (x *usersWaitForEmailVerificationServer) Send(m *Success) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_ResendEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ResendEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/ResendEmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ResendEmailVerification(ctx, req.(*AuthMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ChangeMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MFAStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ChangeMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/ChangeMFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ChangeMFA(ctx, req.(*MFAStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetMFALink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMFALink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetMFALink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/GetMFALink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetMFALink(ctx, req.(*RequestMFALink))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ChangeUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ChangeUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/ChangeUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ChangeUsername(ctx, req.(*ChangeUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestToken",
			Handler:    _Users_RequestToken_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "ResendEmailVerification",
			Handler:    _Users_ResendEmailVerification_Handler,
		},
		{
			MethodName: "ChangeMFA",
			Handler:    _Users_ChangeMFA_Handler,
		},
		{
			MethodName: "GetMFALink",
			Handler:    _Users_GetMFALink_Handler,
		},
		{
			MethodName: "ChangeUsername",
			Handler:    _Users_ChangeUsername_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Users_ChangePassword_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitForEmailVerification",
			Handler:       _Users_WaitForEmailVerification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
